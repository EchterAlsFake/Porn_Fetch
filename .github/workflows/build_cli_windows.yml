name: Build CLI (Windows x32,x64)

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build-pornfetch-cli-windows-x64:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.11 x64
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
          architecture: x64
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements_cli.txt
      - name: Build Porn Fetch (CLI - Windows - X64) (PyInstaller)
        run: |
          pyinstaller -F Porn_Fetch_CLI.py

      - name: Archive Porn Fetch CLI (Windows X64) build
        uses: actions/upload-artifact@v2
        with:
          name: PornFetch_CLI_Windows_x64
          path: dist/Porn_Fetch_CLI.exe

  build-pornfetch-cli-windows-x32:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.11 x64
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
          architecture: x86
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements_cli.txt
      - name: Build Porn Fetch (CLI - Windows - X32) (PyInstaller)
        run: |
          pyinstaller -F Porn_Fetch_CLI.py

      - name: Archive Porn Fetch CLI (Windows X32) build
        uses: actions/upload-artifact@v2
        with:
          name: PornFetch_CLI_Windows_x32
          path: dist/Porn_Fetch_CLI.exe

  create-release:
    needs: [build-pornfetch-cli-windows-x64, build-pornfetch-cli-windows-x32]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install gh CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Download Windows x64 artifact
        uses: actions/download-artifact@v2
        with:
          name: PornFetch_CLI_Windows_x64
          path: ./artifacts

      - name: Download Windows x32 artifact
        uses: actions/download-artifact@v2
        with:
          name: PornFetch_CLI_Windows_x32
          path: ./artifacts

      - name: Get short SHA
        id: vars
        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Check if Release Exists
        id: check_release
        run: |
          if gh release view v1.0.0-automated-${{ env.GITHUB_SHA_SHORT }} >/dev/null 2>&1; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Create GitHub Release
        id: create_release
        if: env.RELEASE_EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: v1.0.0-automated-${{ env.GITHUB_SHA_SHORT }}
          release_name: Automated Release v1.0.0-${{ env.GITHUB_SHA_SHORT }}
          body: |
            This is an automated release generated by the CI/CD pipeline.
          draft: false
          prerelease: true

      - name: Get Release Upload URL
        if: env.RELEASE_EXISTS == 'true'
        id: get_release_url
        run: |
          echo "UPLOAD_URL=$(gh release view v1.0.0-automated-${{ env.GITHUB_SHA_SHORT }} --json upload_url --jq .upload_url)" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        shell: bash

      - name: Upload Windows x64 artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || env.UPLOAD_URL }}
          asset_path: ./artifacts/Porn_Fetch_CLI.exe
          asset_name: PornFetch_CLI_Windows_x64.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows x32 artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || env.UPLOAD_URL }}
          asset_path: ./artifacts/Porn_Fetch_CLI.exe
          asset_name: PornFetch_CLI_Windows_x32.exe
          asset_content_type: application/octet-stream